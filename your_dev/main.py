from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from sqlalchemy.exc import SQLAlchemyError

from your_dev.core.database import async_session_maker
from your_dev.core.logger import logger
from your_dev.repositories.service_repository import ServiceRepository
from your_dev.repositories.users_repository import (
    AdminProfileRepository,
    UserRepository
)
from your_dev.repositories.projects_repository import ProjectRepository
from your_dev.repositories.users_repository import UserRepository
from your_dev.routers import (
    auth_routers,
    main_routers,
    projects_routers,
    services_routers
)
from your_dev.services.initialization_services import InitializationService


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("üöÄ Starting initialization...")

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
    async with async_session_maker() as session:
        try:

            initialization_service = InitializationService(
                user_repo=UserRepository(session),
                profile_repo=AdminProfileRepository(session),
                project_repo=ProjectRepository(session),
                service_repo=ServiceRepository(session),
            )
            await initialization_service.create_admin_if_not_exist()
            await initialization_service.create_profile_if_not_exist()
            # await initialization_service.create_projects_if_not_exist()
            # await initialization_service.create_services_if_not_exist()
            print("‚úÖ Initialization completed!")

            await session.commit()
        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ: {e}")
            await session.rollback()
            raise
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await session.rollback()
            raise

    yield

    # Shutdown
    print("üëã Shutting down...")

app = FastAPI(
    title='üåé YOUR PYTHON DEV',
    description='Python Full-Stack Developer Portfolio',
    version='1.0.0',
    lifespan=lifespan
)

app.mount('/static', StaticFiles(directory='your_dev/static'), name='static')

# app.include_router(auth_routers.router)
app.include_router(projects_routers.router)
app.include_router(services_routers.router)
app.include_router(main_routers.router)


@app.get('/')
async def root():
    '''–ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π, —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç.'''

    return {'message': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ API —Å–µ—Ä–≤–∏—Å–∞ YourDev!'}
